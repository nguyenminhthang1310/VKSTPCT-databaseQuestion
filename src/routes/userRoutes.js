const express = require("express");
const User = require("../models/Users");
const router = express.Router();
// Middleware ki·ªÉm tra header
function checkAuth(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader || authHeader !== `Bearer ${process.env.API_SECRET}`) {
    return res.status(403).json({ error: "Forbidden: Invalid token" });
  }
  next();
}
// L·∫•y danh s√°ch user
router.get("/", checkAuth, async (req, res) => {
  const users = await User.find();
  res.json(users);
});
// X·∫øp h·∫°ng theo ƒëi·ªÉm v√† th·ªùi gian
router.get("/rank", checkAuth, async (req, res) => {
  try {
    const users = await User.find().sort({ traloidung: -1, thoigianlambai: 1 });
    // -1: ƒëi·ªÉm cao nh·∫•t tr∆∞·ªõc
    //  1: th·ªùi gian √≠t nh·∫•t tr∆∞·ªõc (nhanh h∆°n)

    res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°i /users/rank:", err);
    res.status(500).json({ message: "Server error", error: err.message });
  }
});
// GET /users?donvi=Ph√≤ng 1
router.get("/sort", checkAuth, async (req, res) => {
  try {
    const { donvi } = req.query;
    let query = {};

    if (donvi) {
      query.donvi = donvi; // l·ªçc theo ƒë∆°n v·ªã n·∫øu c√≥
    }

    const users = await User.find(query).sort({ donvi: 1 });
    res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y users:", err);
    res.status(500).json({ message: "Server error", error: err.message });
  }
});

router.get("/:id", checkAuth, async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
    }
    res.json(user);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
});

router.post("/", async (req, res) => {
  try {
    const { hoten, donvi, phone } = req.body;

    // 1Ô∏è‚É£ Ki·ªÉm tra nh·∫≠p ƒë·ªß th√¥ng tin
    if (!hoten?.trim() || !donvi?.trim() || !phone?.trim()) {
      return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // 2Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu
    const normalizedHoten = hoten.trim();
    const normalizedPhone = phone.trim();

    // üß© Escape t√™n ƒë·ªÉ tr√°nh l·ªói regex
    const escapedHoten = normalizedHoten.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");

    // 3Ô∏è‚É£ Ki·ªÉm tra xem h·ªç t√™n ƒë√£ t·ªìn t·∫°i (kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng)
    const count = await User.countDocuments({
      hoten: { $regex: new RegExp(`^${escapedHoten}$`, "i") },
    });

    console.log("üß© Check user:", normalizedHoten, "=>", count, "l·∫ßn");

    if (count >= 1) {
      return res
        .status(400)
        .json({ error: "H·ªç t√™n n√†y ƒë√£ xu·∫•t hi·ªán qu√° 2 l·∫ßn!" });
    }

    // 4Ô∏è‚É£ N·∫øu ch∆∞a v∆∞·ª£t qu√° -> t·∫°o user m·ªõi
    const newUser = await User.create({
      hoten: normalizedHoten,
      donvi: donvi.trim(),
      phone: normalizedPhone,
    });

    // 5Ô∏è‚É£ Tr·∫£ v·ªÅ user m·ªõi
    res.json(newUser);
  } catch (err) {
    console.error("üî• L·ªói x·ª≠ l√Ω ƒëƒÉng nh·∫≠p:", err);
    res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});

// S·ª≠a user
router.put("/:id", checkAuth, async (req, res) => {
  try {
    const { id } = req.params; // l·∫•y id t·ª´ URL
    const updateData = req.body; // d·ªØ li·ªáu g·ª≠i l√™n ƒë·ªÉ update

    const user = await User.findByIdAndUpdate(id, updateData, {
      new: true, // tr·∫£ v·ªÅ document ƒë√£ update
      runValidators: true, // ch·∫°y validate trong schema
    });

    if (!user) {
      return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
    }

    res.json(user); // tr·∫£ v·ªÅ user sau khi update
  } catch (error) {
    res.status(400).json({ error: err.message });
  }
});

//x√≥a all
router.delete("/all", checkAuth, async (req, res) => {
  try {
    const result = await User.deleteMany({});
    res.status(200).json({
      message: "ƒê√£ xo√° t·∫•t c·∫£ user",
      deletedCount: result.deletedCount,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi xo√° all users:", err);
    res.status(500).json({ message: err.message });
  }
});
router.delete("/:id", checkAuth, async (req, res) => {
  try {
    const deletedUser = await User.findByIdAndDelete(req.params.id);
    if (!deletedUser) {
      return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
    }
    res.json({ message: "X√≥a user th√†nh c√¥ng", user: deletedUser });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
});
module.exports = router;
